<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Wander</title>
    <link>http://ken.pepple.info/tags/python/index.xml</link>
    <description>Recent content in Python on Wander</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;&lt;img src=&#34;http://i.creativecommons.org/l/by-sa/3.0/88x31.png&#34;&gt;&lt;/a&gt;</copyright>
    <atom:link href="http://ken.pepple.info/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Custom iPhone Notifications with Prowl</title>
      <link>http://ken.pepple.info/python/2011/03/21/custom-iphone-notifications-with-prowl</link>
      <pubDate>Mon, 21 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://ken.pepple.info/python/2011/03/21/custom-iphone-notifications-with-prowl</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://ken.pepple.info/images/prowl_empty.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On of my favorite iPhone feature is &lt;a href=&#34;http://en.wikipedia.org/wiki/Apple_Push_Notification_Service&#34;&gt;push notifications&lt;/a&gt;. However, only a few applications use these well (ESPN ScoreCenter, AP mobile, Twitter, etc.) and I&amp;rsquo;ve always wished I could write my own without creating a full blown iPhone application. Enter a simple application called &lt;a href=&#34;http://www.prowlapp.com/&#34;&gt;Prowl&lt;/a&gt;. Prowl is a &lt;a href=&#34;http://growl.info/&#34;&gt;Growl&lt;/a&gt; client for iOS that pushes notifications to your iPhone, iPod touch or iPad with a simple API.&lt;/p&gt;

&lt;p&gt;To send yourself custom push notifications, you&amp;rsquo;ll first need to buy &lt;a href=&#34;http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=320876271&#34;&gt;Prowl&lt;/a&gt; for your iPhone (around USD$2.99). Once you&amp;rsquo;ve downloaded and installed it on your iPhone, you need to &lt;a href=&#34;https://www.prowlapp.com/api_settings.php&#34;&gt;generate an API key&lt;/a&gt;. With that completed, you are all set to receive Prowl alerts.&lt;/p&gt;

&lt;p&gt;Some desktop/server apps work with it out of the box (a semi-full list is at &lt;a href=&#34;http://www.prowlapp.com/apps.php&#34;&gt;http://www.prowlapp.com/apps.php&lt;/a&gt;. Others like &lt;a href=&#34;http://en.znc.in/wiki/Prowl&#34;&gt;znc&lt;/a&gt;, &lt;a href=&#34;http://flexget.com/wiki/Plugins/prowl&#34;&gt;flexget&lt;/a&gt; or &lt;a href=&#34;http://reluctanthacker.rollett.org/content/setting-nagios3-send-prowl-notifications&#34;&gt;Nagios&lt;/a&gt; require a plugin. To create you own custom alert, you&amp;rsquo;ll need to write some scripting code. I prefer using Python or Ruby for this, but &lt;a href=&#34;http://www.prowlapp.com/api.php#libraries&#34;&gt;there are plenty of libraries available for other languages&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;prowl-api&#34;&gt;Prowl API&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://www.prowlapp.com/api.php&#34;&gt;Prowl API&lt;/a&gt; is very simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add&lt;/code&gt; (POST) which sends notifications to your iPhone&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verify&lt;/code&gt; (GET) which checks the validity of your API key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just recently the API was updated to version 1.2 which added two new methods - &lt;code&gt;retrieve/token&lt;/code&gt; (GET) and &lt;code&gt;retrieve/apikey&lt;/code&gt; (GET) - which appeal mostly to website operators. They facilitate giving people your API key in a secure manner.&lt;/p&gt;

&lt;p&gt;While the API is very simple, and you could certainly use it from the command line with a tool like curl, most people will want to use a library for their favorite programming language. I use two of these libraries, Prowly for Ruby and ProwlPy for Python.&lt;/p&gt;

&lt;h3 id=&#34;prowly-for-ruby&#34;&gt;Prowly for Ruby&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://raflabs.com/blogs/silence-is-foo/2010/06/30/prowly-a-ruby-api-wrapper-for-prowl-the-growl-client-for-the-iphone/&#34;&gt;Prowly gem&lt;/a&gt; was written by Rafael Magana to make the Prowl API a bit more Ruby-friendly. It is dead simple to use. First, install the gem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo gem install prowly
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then create a simple script like the one below:&lt;/p&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;prowly&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# your api key from https://www.prowlapp.com/api_settings.php&lt;/span&gt;
my_api_key &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;1234567890123456789012345678901234567890&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #880000&#34;&gt;Prowly&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;notify &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;n&lt;span style=&#34;color: #666666&#34;&gt;|&lt;/span&gt;
    n&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;apikey &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; my_api_key
    n&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;priority &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #880000&#34;&gt;Prowly&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #880000&#34;&gt;Notification&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #880000&#34;&gt;Priority&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #880000&#34;&gt;MODERATE&lt;/span&gt;
    n&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;application &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Prowly&amp;quot;&lt;/span&gt;
    n&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;event &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Notification&amp;quot;&lt;/span&gt;
    n&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;description &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Your server is under attack!!!&amp;quot;&lt;/span&gt;
    n&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;url &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;http://www.myserver.com&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# requires API 1.2 support&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is basically all there is to it. Of course, you&amp;rsquo;ll want your script to actually do something (check a stock, parse a RSS feed, etc.), but sending the prowl is really that simple. Prowly also includes a command line script to send notifications without any scripting.&lt;/p&gt;

&lt;p&gt;Right now, the current gem has not been updated to use version 1.2 of the API. I&amp;rsquo;ve put in a &lt;a href=&#34;https://github.com/rafmagana/prowly/pull/1&#34;&gt;pull request to get my upgrades merged in&lt;/a&gt; but in the meantime you can clone the updated one from my gtihub repository at  &lt;a href=&#34;https://github.com/slashk/prowly&#34;&gt;https://github.com/slashk/prowly&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;prowlpy-for-python&#34;&gt;ProwlPy for Python&lt;/h3&gt;

&lt;p&gt;A corresponding Python library is called ProwlPy and was written by Jacob Burch and Olivier Hervieu. It is very similar to the Prowly. To use it, install the python library (which doesn&amp;rsquo;t appear to be on PyPi):&lt;/p&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/jacobb/prowlpy.git
... snip ...
$ &lt;span style=&#34;color: #008000&#34;&gt;cd&lt;/span&gt; prowlpy
$ python setup.py install
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then just create a simple script like the ruby one above:&lt;/p&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;prowlpy&lt;/span&gt;

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# your api key from https://www.prowlapp.com/api_settings.php&lt;/span&gt;
my_api_key &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;1234567890123456789012345678901234567890&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# your api key&lt;/span&gt;
p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; prowlpy&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;Prowl(my_api_key)
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt;:
    p&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;ProwlPy&amp;#39;&lt;/span&gt;,
          &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Notification&amp;#39;&lt;/span&gt;,
          &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Your server is under attack&amp;#39;&lt;/span&gt;,
          &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;,
          &lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;,
          &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;http://www.myserver.com&amp;quot;&lt;/span&gt;)
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #D2413A; font-weight: bold&#34;&gt;Exception&lt;/span&gt;,msg:
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;print&lt;/span&gt; msg
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also upgraded this library to version 1.2 of the API and my changes have already been merged into the main repository at &lt;a href=&#34;https://github.com/jacobb/prowlpy&#34;&gt;https://github.com/slashk/prowly&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;creating-your-own-prowl-notifiers&#34;&gt;Creating Your Own Prowl Notifiers&lt;/h3&gt;

&lt;p&gt;&lt;img style=&#34;float: right;&#34; src=&#34;http://ken.pepple.info/images/prowl_alert.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve grokked the basics of using the Prowl API, it&amp;rsquo;s time to actually put it to use. To do that, you&amp;rsquo;ll need to create your own script (with whatever logic you need), have it execute at common intervals (usually via &lt;span class=&#34;code-inline&#34;&gt;cron&lt;/span&gt;) and then just wait for prowl notifications to roll in.&lt;/p&gt;

&lt;p&gt;To get you started, I&amp;rsquo;ve created a repository of scripts that I use over at &lt;a href=&#34;https://github.com/slashk/prowl-scripts&#34;&gt;https://github.com/slashk/prowl-scripts&lt;/a&gt;. There you&amp;rsquo;ll see a few scripts to notify you of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.transmissionbt.com/&#34;&gt;transmission bit torrent&lt;/a&gt; download completions&lt;/li&gt;
&lt;li&gt;daily and monthly Google AdSense balances&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.woot.com/&#34;&gt;woot!&lt;/a&gt; deals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ll be adding more as I clean up my other scripts (weather, stock prices, steep and cheap, etc).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configurable Instance Types For OpenStack</title>
      <link>http://ken.pepple.info/openstack/2011/03/03/configurable-instance-types-for-openstack</link>
      <pubDate>Thu, 03 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://ken.pepple.info/openstack/2011/03/03/configurable-instance-types-for-openstack</guid>
      <description>

&lt;p&gt;Over the past three weeks, new Nova core developer Josh Kearney (&lt;em&gt;congrats &lt;a href=&#34;http://twitter.com/#!/jk0&#34;&gt;@jk0&lt;/a&gt;&lt;/em&gt;) and I have been working on adding runtime configuration of instance types (&lt;a href=&#34;http://wiki.openstack.org/ConfigureInstanceTypesDynamically&#34;&gt;read the full specification&lt;/a&gt;) to the &lt;a href=&#34;https://launchpad.net/nova&#34;&gt;OpenStack Nova compute service&lt;/a&gt;.  Instance types (or &amp;ldquo;flavors&amp;rdquo; as Rackspace calls them) are resources granted to virtual machines (&amp;ldquo;instances&amp;rdquo;) in the Nova cloud. In more specific terms, this is the size of the instance (vCPUs, RAM, Storage, etc.) that you will be launching. You may recognize these by the names &amp;ldquo;m1.large&amp;rdquo; or &amp;ldquo;m1.tiny&amp;rdquo; in AWS EC2 parlance. The Rackspace&amp;rsquo;s API (&lt;a href=&#34;http://docs.rackspacecloud.com/servers/api/v1.0/cs-devguide-20110112.pdf&#34;&gt;PDF&lt;/a&gt;) calls these &amp;ldquo;flavors&amp;rdquo; and they tend to have names like &amp;ldquo;256 MB Server&amp;rdquo; and such.&lt;/p&gt;

&lt;p&gt;In the released version of OpenStack Nova (Bexar), instance types are defined statically in the &lt;code&gt;nova/instance_types.py&lt;/code&gt; file (which corresponds to the initial Amazon EC2 instance types) before run-time. This change, which will be part of the upcoming version of Nova (Cactus), instance types can be created by the Nova administrator during run-time through the &lt;span class=&#34;code-inline&#34;&gt;nova-manage&lt;/span&gt; command. If you are following the Nova trunk (or just impatient), you can find this merged in at &lt;a href=&#34;http://bazaar.launchpad.net/~hudson-openstack/nova/trunk/revision/757&#34;&gt;revision number 757&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;basic-management&#34;&gt;Basic Management&lt;/h3&gt;

&lt;p&gt;Instance types / flavor are managed through the &lt;span class=&#34;code-inline&#34;&gt;nova-manage&lt;/span&gt; binary with the &lt;span class=&#34;code-inline&#34;&gt;instance_type&lt;/span&gt; command and an appropriate subcommand. As we are using the &lt;span class=&#34;code-inline&#34;&gt;nova-manage&lt;/span&gt; command, we need to be on the Nova database server to configure instance types. Right now, instance type manipulation isn&amp;rsquo;t exposed through the APIs nor the adminclient.&lt;/p&gt;

&lt;p&gt;Note that you can also use the &lt;span class=&#34;code-inline&#34;&gt;flavor&lt;/span&gt; command as a synonym for &lt;span class=&#34;code-inline&#34;&gt;instance_types&lt;/span&gt; for any of these examples.&lt;/p&gt;

&lt;p&gt;To see all currently active instance types, use the list subcommand:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova-manage instance_type list
m1.medium: Memory: 4096MB, VCPUS: 2, Storage: 40GB, FlavorID: 3, Swap: 0GB, RXTX Quota: 0GB, RXTX Cap: 0MB
m1.large: Memory: 8192MB, VCPUS: 4, Storage: 80GB, FlavorID: 4, Swap: 0GB, RXTX Quota: 0GB, RXTX Cap: 0MB
m1.tiny: Memory: 512MB, VCPUS: 1, Storage: 0GB, FlavorID: 1, Swap: 0GB, RXTX Quota: 0GB, RXTX Cap: 0MB
m1.xlarge: Memory: 16384MB, VCPUS: 8, Storage: 160GB, FlavorID: 5, Swap: 0GB, RXTX Quota: 0GB, RXTX Cap: 0MB
m1.small: Memory: 2048MB, VCPUS: 1, Storage: 20GB, FlavorID: 2, Swap: 0GB, RXTX Quota: 0GB, RXTX Cap: 0MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, and just for emphasis, you could just have easily used the &lt;span class=&#34;code-inline&#34;&gt;flavor&lt;/span&gt; subcommand to get the exact same output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova-manage flavor list
m1.medium: Memory: 4096MB, VCPUS: 2, Storage: 40GB, FlavorID: 3, Swap: 0GB, RXTX Quota: 0GB, RXTX Cap: 0MB
m1.large: Memory: 8192MB, VCPUS: 4, Storage: 80GB, FlavorID: 4, Swap: 0GB, RXTX Quota: 0GB, RXTX Cap: 0MB
m1.tiny: Memory: 512MB, VCPUS: 1, Storage: 0GB, FlavorID: 1, Swap: 0GB, RXTX Quota: 0GB, RXTX Cap: 0MB
m1.xlarge: Memory: 16384MB, VCPUS: 8, Storage: 160GB, FlavorID: 5, Swap: 0GB, RXTX Quota: 0GB, RXTX Cap: 0MB
m1.small: Memory: 2048MB, VCPUS: 1, Storage: 20GB, FlavorID: 2, Swap: 0GB, RXTX Quota: 0GB, RXTX Cap: 0MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create an instance type, use the &lt;span class=&#34;code-inline&#34;&gt;create&lt;/span&gt; subcommand with the following positional arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;memory (expressed in megabytes)&lt;/li&gt;
&lt;li&gt;vcpu(s) (integer)&lt;/li&gt;
&lt;li&gt;local storage (expressed in gigabytes)&lt;/li&gt;
&lt;li&gt;flavorid (unique integer)&lt;/li&gt;
&lt;li&gt;swap space (expressed in megabytes, defaults to zero, optional)&lt;/li&gt;
&lt;li&gt;RXTX quotas (expressed in gigabytes, defaults to zero, optional)&lt;/li&gt;
&lt;li&gt;RXTX cap (expressed in gigabytes, defaults to zero, optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following example creates an instance type named &lt;code&gt;m1.xxlarge&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova-manage instance_type create m1.xxlarge 32768 16 320 0 0 0
m1.xxlarge created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete an instance type, use the &lt;code&gt;delete&lt;/code&gt; subcommand and specify the name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova-manage instance_type delete m1.xxlarge
m1.xxlarge deleted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note that the &lt;code&gt;delete&lt;/code&gt; command only marks the instance type as inactive in the database; it does not actually remove the instance type. This is done to preserve the instance type definition for long running instances (which may not terminate for months or years). If you are sure that you want to delete this instance type from the database, pass the &lt;code&gt;--purge&lt;/code&gt; flag after the name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ nova-manage instance_type delete m1.xxlarge --purge
m1.xxlarge purged
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be careful with deleting instance types, you might need this information later. Unless you truly need to prune the size of your instance_types table you are much safer to just &lt;code&gt;delete&lt;/code&gt; the instance type.&lt;/p&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;This feature is implemented with an additional database table (instance_types), which has rows for each instance type/flavor. The &lt;code&gt;nova-manage&lt;/code&gt; command allows you to manipulate this table. At installation time (actually when the &lt;code&gt;nova-manage db sync&lt;/code&gt; command is run), the database table is seeded with instance type values for the five default types: m1.small, m1.tiny, m1.medium, m1.large and m1.xlarge.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>